json value :> interface {
  serialize (this) => string;
}

json parse error :> interface {
  (this) => string;
}

json object :> new json object from (members : .NET System.Collections.Generic.Dictionary<string, json value>) :< json value {
  // TODO: access.
  serialize (this) => string { 
    // TODO:
  }
}

json array :> new json array from (members : json value list) :< json value {
  (this) => enumerable json value { members }
  serialize (this) => string {
    // TODO:
  }
}

string :< json value { 
  serialize (this) => string {
    // TODO: escape things
  }
}

bool :< json value {
  serialize (this) => string {
    if this "true" else "false"
  }
}

null :> null :< json value {
  serialize (this) => string { "null" }
}

json number :> (int part : string).(frac part : string)e(exponent part : string) :< json value {
  (this) integer part => string { int part }
  (this) fractional part => string { frace part }
  (this) exponent part => string { exponent part }
  serialize (this) => string {
    int part + "." + frac part + "e" + exponent part
  }
}

(value : int) => json number { value.ToString().null e null }
(int part : string).(frac part : string) => json number { int part.frac part e null }

json parse result :> interface {
  (this) succeeded => bool;
}

json value :< json parse result {
  (this) succeeded => bool { true }
}

json parse error :< json parse result {
  (this) succeeded => bool { false }
}

simple json parse error :> error (error message : string) :< json parse error {
  (this) => string { error message }
} 

(a : json parse result) | (b : json parse result) => json parse result { a }
(a : json value) | (b : json parse result) => json parse result { a }
(a : json parse error) | (b : json value) => json parse result { b }

parse json (input : string) => json parse result {
  parse json object from input 0 |
  parse json array from input 0 |
  parse json string from input 0 |
  parse json number from input 0 |
  parse json bool from input 0 |
  parse json null from input 0 
}

parse json object from (input : string) (index : int) -> (continue with (string) (int))
parse json object from (input : string) (index : int) => json parse result {}
parse json object from (input : string) => json parse result { parse json object from input 0 }
parse json array from (input : string) (index : int) => json parse result {}
parse json array from (input : string) => json parse result { parse json array from input 0 }
parse json string from (input : string) (index : int) => json parse result {}
parse json string from (input : string) => json parse result { parse json string from input 0 }
parse json number from (input : string) (index : int) => json parse result {}
parse json number from (input : string) => json parse result { parse json number from input 0 }
parse json bool from (input : string) (index : int) => json parse result {}
parse json bool from (input : string) => json parse result { parse json bool from input 0 }
parse json null from (input : string) (index : int) => json parse result {}
parse json null from (input : string) => json parse result { parse json null from input 0 }